{"version":3,"file":"calendar.js","sourceRoot":"","sources":["../src/calendar.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\n\nimport { CalendarService } from './calendar.service';\n\nexport interface IEvent {\n    allDay: boolean;\n    endTime: Date;\n    startTime: Date;\n    title: string;\n}\n\nexport interface IRange {\n    startTime: Date;\n    endTime: Date;\n}\n\nexport interface IView {}\n\nexport interface IDayView extends IView {\n    allDayEvents: IDisplayAllDayEvent[];\n    rows: IDayViewRow[];\n}\n\nexport interface IDayViewRow {\n    events: IDisplayEvent[];\n    time: Date;\n}\n\nexport interface IMonthView extends IView {\n    dates: IMonthViewRow[];\n}\n\nexport interface IMonthViewRow {\n    current?: boolean;\n    date: Date;\n    events: IEvent[];\n    hasEvent?: boolean;\n    label: string;\n    secondary: boolean;\n    selected?: boolean;\n}\n\nexport interface IWeekView extends IView {\n    dates: IWeekViewDateRow[];\n    rows: IWeekViewRow[][];\n}\n\nexport interface IWeekViewDateRow {\n    date: Date;\n    events: IDisplayEvent[];\n}\n\nexport interface IWeekViewRow {\n    events: IDisplayEvent[];\n    time: Date;\n}\n\nexport interface IDisplayEvent {\n    endIndex: number;\n    endOffset?: number;\n    event: IEvent;\n    startIndex: number;\n    startOffset?: number;\n    overlapNumber?: number;\n    position?: number;\n}\n\nexport interface IDisplayAllDayEvent {\n    event: IEvent;\n}\n\nexport interface ICalendarComponent {\n    currentViewIndex: number;\n    direction: number;\n    eventSource: IEvent[];\n    getRange: { (date: Date): IRange; };\n    getViewData: { (date: Date): IView };\n    mode: CalendarMode;\n    range: IRange;\n    views: IView[];\n    onDataLoaded: { (): void };\n    onRangeChanged: EventEmitter<IRange>;\n}\n\nexport interface ITimeSelected {\n    events: IEvent[];\n    selectedTime: Date;\n}\n\nexport type CalendarMode = 'day' | 'month' | 'week';\n\nexport type QueryMode = 'local' | 'remote';\n\nexport enum Step {\n    QuarterHour = 15,\n    HalfHour = 30,\n    Hour = 60\n}\n\n\nexport class CalendarComponent implements OnInit {\n    \n    get currentDate(): Date {\n        return this._currentDate;\n    }\n    set currentDate(val: Date) {\n        this._currentDate = val;\n        this.calendarService.currentDate = this.currentDate;\n    }\n\n     eventSource: IEvent[] = [];\n     calendarMode: CalendarMode = 'month';\n     formatDay: string = 'd';\n     formatDayHeader: string = 'EEE';\n     formatDayTitle: string = 'MMMM dd, yyyy';\n     formatWeekTitle: string = 'MMMM yyyy, Week $n';\n     formatMonthTitle: string = 'MMMM yyyy';\n     formatWeekViewDayHeader: string = 'EEE d';\n     formatHourColumn: string = 'ha';\n     showEventDetail: boolean = true;\n     startingDayMonth: number = 0;\n     startingDayWeek: number = 0;\n     allDayLabel: string = 'all day';\n     noEventsLabel: string = 'No Events';\n     queryMode: QueryMode = 'local';\n     step: Step = Step.Hour;\n\n     onCurrentDateChanged = new EventEmitter<Date>();\n     onRangeChanged = new EventEmitter<IRange>();\n     onEventSelected = new EventEmitter<IEvent>();\n     onTimeSelected = new EventEmitter<ITimeSelected>();\n     onTitleChanged = new EventEmitter<string>();\n\n    private _currentDate: Date;\n    private hourParts = 1;\n\n    constructor(private calendarService: CalendarService) {}\n\n    ngOnInit() {\n        this.hourParts = 60 / this.step;\n        this.calendarService.queryMode = this.queryMode;\n\n        this.calendarService.currentDateChanged$.subscribe(currentDate => {\n            this._currentDate = currentDate;\n            this.onCurrentDateChanged.emit(currentDate);\n        });\n    }\n\n    rangeChanged(range: IRange) {\n        this.onRangeChanged.emit(range);\n    }\n\n    eventSelected(event: IEvent) {\n        this.onEventSelected.emit(event);\n    }\n\n    timeSelected(timeSelected: ITimeSelected) {\n        this.onTimeSelected.emit(timeSelected);\n    }\n\n    titleChanged(title: string) {\n        this.onTitleChanged.emit(title);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'calendar',\n    template: `\n        <div [ngSwitch]=\"calendarMode\">\n            <monthview *ngSwitchCase=\"'month'\"\n                [formatDay]=\"formatDay\"\n                [formatDayHeader]=\"formatDayHeader\"\n                [formatMonthTitle]=\"formatMonthTitle\"\n                [startingDayMonth]=\"startingDayMonth\"\n                [showEventDetail]=\"showEventDetail\"\n                [noEventsLabel]=\"noEventsLabel\"\n                [eventSource]=\"eventSource\"\n                (onRangeChanged)=\"rangeChanged($event)\"\n                (onEventSelected)=\"eventSelected($event)\"\n                (onTimeSelected)=\"timeSelected($event)\"\n                (onTitleChanged)=\"titleChanged($event)\">\n            </monthview>\n            <weekview *ngSwitchCase=\"'week'\"\n                [formatWeekTitle]=\"formatWeekTitle\"\n                [formatWeekViewDayHeader]=\"formatWeekViewDayHeader\"\n                [formatHourColumn]=\"formatHourColumn\"\n                [startingDayWeek]=\"startingDayWeek\"\n                [allDayLabel]=\"allDayLabel\"\n                [hourParts]=\"hourParts\"\n                [eventSource]=\"eventSource\"\n                (onRangeChanged)=\"rangeChanged($event)\"\n                (onEventSelected)=\"eventSelected($event)\"\n                (onTimeSelected)=\"timeSelected($event)\"\n                (onTitleChanged)=\"titleChanged($event)\">\n            </weekview>\n            <dayview *ngSwitchCase=\"'day'\"\n                [formatDayTitle]=\"formatDayTitle\"\n                [formatHourColumn]=\"formatHourColumn\"\n                [allDayLabel]=\"allDayLabel\"\n                [hourParts]=\"hourParts\"\n                [eventSource]=\"eventSource\"\n                (onRangeChanged)=\"rangeChanged($event)\"\n                (onEventSelected)=\"eventSelected($event)\"\n                (onTimeSelected)=\"timeSelected($event)\"\n                (onTitleChanged)=\"titleChanged($event)\">\n            </dayview>\n        </div>\n    `,\n    styles: [`\n        :host > div { height: 100%; }\n    `],\n    providers: [CalendarService]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: CalendarService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'currentDate': [{ type: Input },],\n'eventSource': [{ type: Input },],\n'calendarMode': [{ type: Input },],\n'formatDay': [{ type: Input },],\n'formatDayHeader': [{ type: Input },],\n'formatDayTitle': [{ type: Input },],\n'formatWeekTitle': [{ type: Input },],\n'formatMonthTitle': [{ type: Input },],\n'formatWeekViewDayHeader': [{ type: Input },],\n'formatHourColumn': [{ type: Input },],\n'showEventDetail': [{ type: Input },],\n'startingDayMonth': [{ type: Input },],\n'startingDayWeek': [{ type: Input },],\n'allDayLabel': [{ type: Input },],\n'noEventsLabel': [{ type: Input },],\n'queryMode': [{ type: Input },],\n'step': [{ type: Input },],\n'onCurrentDateChanged': [{ type: Output },],\n'onRangeChanged': [{ type: Output },],\n'onEventSelected': [{ type: Output },],\n'onTimeSelected': [{ type: Output },],\n'onTitleChanged': [{ type: Output },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}